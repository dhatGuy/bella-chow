/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/order": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order.id"];
          user_id?: parameters["rowFilter.order.user_id"];
          date?: parameters["rowFilter.order.date"];
          amount?: parameters["rowFilter.order.amount"];
          status?: parameters["rowFilter.order.status"];
          payment_ref?: parameters["rowFilter.order.payment_ref"];
          cafe_id?: parameters["rowFilter.order.cafe_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["order"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** order */
          order?: definitions["order"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order.id"];
          user_id?: parameters["rowFilter.order.user_id"];
          date?: parameters["rowFilter.order.date"];
          amount?: parameters["rowFilter.order.amount"];
          status?: parameters["rowFilter.order.status"];
          payment_ref?: parameters["rowFilter.order.payment_ref"];
          cafe_id?: parameters["rowFilter.order.cafe_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.order.id"];
          user_id?: parameters["rowFilter.order.user_id"];
          date?: parameters["rowFilter.order.date"];
          amount?: parameters["rowFilter.order.amount"];
          status?: parameters["rowFilter.order.status"];
          payment_ref?: parameters["rowFilter.order.payment_ref"];
          cafe_id?: parameters["rowFilter.order.cafe_id"];
        };
        body: {
          /** order */
          order?: definitions["order"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/cartItems": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cartItems.id"];
          cart_id?: parameters["rowFilter.cartItems.cart_id"];
          total_price?: parameters["rowFilter.cartItems.total_price"];
          qty?: parameters["rowFilter.cartItems.qty"];
          menu_id?: parameters["rowFilter.cartItems.menu_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cartItems"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cartItems */
          cartItems?: definitions["cartItems"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cartItems.id"];
          cart_id?: parameters["rowFilter.cartItems.cart_id"];
          total_price?: parameters["rowFilter.cartItems.total_price"];
          qty?: parameters["rowFilter.cartItems.qty"];
          menu_id?: parameters["rowFilter.cartItems.menu_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cartItems.id"];
          cart_id?: parameters["rowFilter.cartItems.cart_id"];
          total_price?: parameters["rowFilter.cartItems.total_price"];
          qty?: parameters["rowFilter.cartItems.qty"];
          menu_id?: parameters["rowFilter.cartItems.menu_id"];
        };
        body: {
          /** cartItems */
          cartItems?: definitions["cartItems"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/cart": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cart.id"];
          user_id?: parameters["rowFilter.cart.user_id"];
          totalAmount?: parameters["rowFilter.cart.totalAmount"];
          cafe_id?: parameters["rowFilter.cart.cafe_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cart"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cart */
          cart?: definitions["cart"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cart.id"];
          user_id?: parameters["rowFilter.cart.user_id"];
          totalAmount?: parameters["rowFilter.cart.totalAmount"];
          cafe_id?: parameters["rowFilter.cart.cafe_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cart.id"];
          user_id?: parameters["rowFilter.cart.user_id"];
          totalAmount?: parameters["rowFilter.cart.totalAmount"];
          cafe_id?: parameters["rowFilter.cart.cafe_id"];
        };
        body: {
          /** cart */
          cart?: definitions["cart"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/cafeterias": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cafeterias.id"];
          name?: parameters["rowFilter.cafeterias.name"];
          image?: parameters["rowFilter.cafeterias.image"];
          about?: parameters["rowFilter.cafeterias.about"];
          owned_by?: parameters["rowFilter.cafeterias.owned_by"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["cafeterias"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** cafeterias */
          cafeterias?: definitions["cafeterias"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cafeterias.id"];
          name?: parameters["rowFilter.cafeterias.name"];
          image?: parameters["rowFilter.cafeterias.image"];
          about?: parameters["rowFilter.cafeterias.about"];
          owned_by?: parameters["rowFilter.cafeterias.owned_by"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.cafeterias.id"];
          name?: parameters["rowFilter.cafeterias.name"];
          image?: parameters["rowFilter.cafeterias.image"];
          about?: parameters["rowFilter.cafeterias.about"];
          owned_by?: parameters["rowFilter.cafeterias.owned_by"];
        };
        body: {
          /** cafeterias */
          cafeterias?: definitions["cafeterias"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/reviews": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reviews.id"];
          user_id?: parameters["rowFilter.reviews.user_id"];
          cafe_id?: parameters["rowFilter.reviews.cafe_id"];
          content?: parameters["rowFilter.reviews.content"];
          rating?: parameters["rowFilter.reviews.rating"];
          date?: parameters["rowFilter.reviews.date"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["reviews"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** reviews */
          reviews?: definitions["reviews"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reviews.id"];
          user_id?: parameters["rowFilter.reviews.user_id"];
          cafe_id?: parameters["rowFilter.reviews.cafe_id"];
          content?: parameters["rowFilter.reviews.content"];
          rating?: parameters["rowFilter.reviews.rating"];
          date?: parameters["rowFilter.reviews.date"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.reviews.id"];
          user_id?: parameters["rowFilter.reviews.user_id"];
          cafe_id?: parameters["rowFilter.reviews.cafe_id"];
          content?: parameters["rowFilter.reviews.content"];
          rating?: parameters["rowFilter.reviews.rating"];
          date?: parameters["rowFilter.reviews.date"];
        };
        body: {
          /** reviews */
          reviews?: definitions["reviews"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/menu": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menu.id"];
          name?: parameters["rowFilter.menu.name"];
          description?: parameters["rowFilter.menu.description"];
          price?: parameters["rowFilter.menu.price"];
          image?: parameters["rowFilter.menu.image"];
          available?: parameters["rowFilter.menu.available"];
          cafe_id?: parameters["rowFilter.menu.cafe_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["menu"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** menu */
          menu?: definitions["menu"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menu.id"];
          name?: parameters["rowFilter.menu.name"];
          description?: parameters["rowFilter.menu.description"];
          price?: parameters["rowFilter.menu.price"];
          image?: parameters["rowFilter.menu.image"];
          available?: parameters["rowFilter.menu.available"];
          cafe_id?: parameters["rowFilter.menu.cafe_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menu.id"];
          name?: parameters["rowFilter.menu.name"];
          description?: parameters["rowFilter.menu.description"];
          price?: parameters["rowFilter.menu.price"];
          image?: parameters["rowFilter.menu.image"];
          available?: parameters["rowFilter.menu.available"];
          cafe_id?: parameters["rowFilter.menu.cafe_id"];
        };
        body: {
          /** menu */
          menu?: definitions["menu"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          firstname?: parameters["rowFilter.users.firstname"];
          lastname?: parameters["rowFilter.users.lastname"];
          cafe_owner?: parameters["rowFilter.users.cafe_owner"];
          address?: parameters["rowFilter.users.address"];
          phone?: parameters["rowFilter.users.phone"];
          gender?: parameters["rowFilter.users.gender"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          firstname?: parameters["rowFilter.users.firstname"];
          lastname?: parameters["rowFilter.users.lastname"];
          cafe_owner?: parameters["rowFilter.users.cafe_owner"];
          address?: parameters["rowFilter.users.address"];
          phone?: parameters["rowFilter.users.phone"];
          gender?: parameters["rowFilter.users.gender"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          firstname?: parameters["rowFilter.users.firstname"];
          lastname?: parameters["rowFilter.users.lastname"];
          cafe_owner?: parameters["rowFilter.users.cafe_owner"];
          address?: parameters["rowFilter.users.address"];
          phone?: parameters["rowFilter.users.phone"];
          gender?: parameters["rowFilter.users.gender"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/orderItems": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.orderItems.id"];
          order_id?: parameters["rowFilter.orderItems.order_id"];
          total_price?: parameters["rowFilter.orderItems.total_price"];
          qty?: parameters["rowFilter.orderItems.qty"];
          menu_id?: parameters["rowFilter.orderItems.menu_id"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["orderItems"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** orderItems */
          orderItems?: definitions["orderItems"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.orderItems.id"];
          order_id?: parameters["rowFilter.orderItems.order_id"];
          total_price?: parameters["rowFilter.orderItems.total_price"];
          qty?: parameters["rowFilter.orderItems.qty"];
          menu_id?: parameters["rowFilter.orderItems.menu_id"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.orderItems.id"];
          order_id?: parameters["rowFilter.orderItems.order_id"];
          total_price?: parameters["rowFilter.orderItems.total_price"];
          qty?: parameters["rowFilter.orderItems.qty"];
          menu_id?: parameters["rowFilter.orderItems.menu_id"];
        };
        body: {
          /** orderItems */
          orderItems?: definitions["orderItems"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  order: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: date
     * @default now()
     */
    date: string;
    /** Format: numeric */
    amount?: number;
    /**
     * Format: character varying
     * @default processing
     */
    status: string;
    /** Format: character varying */
    payment_ref: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `cafeterias.id`.<fk table='cafeterias' column='id'/>
     */
    cafe_id?: number;
  };
  /** @description This is a duplicate copy of cartDetails */
  cartItems: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `cart.id`.<fk table='cart' column='id'/>
     */
    cart_id: number;
    /** Format: numeric */
    total_price?: number;
    /** Format: integer */
    qty?: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `menu.id`.<fk table='menu' column='id'/>
     */
    menu_id: number;
  };
  /** @description This is a duplicate copy of cart */
  cart: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: numeric
     * @default 0
     */
    totalAmount: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `cafeterias.id`.<fk table='cafeterias' column='id'/>
     */
    cafe_id?: number;
  };
  cafeterias: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    name?: string;
    /** Format: character varying */
    image?: string;
    /** Format: character varying */
    about?: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    owned_by?: string;
  };
  reviews: {
    /** Format: integer */
    id: number;
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `users.id`.<fk table='users' column='id'/>
     */
    user_id: string;
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `cafeterias.id`.<fk table='cafeterias' column='id'/>
     */
    cafe_id: number;
    /** Format: text */
    content: string;
    /** Format: integer */
    rating: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    date?: string;
  };
  menu: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: character varying */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: numeric */
    price?: number;
    /** Format: text */
    image?: string;
    /** Format: boolean */
    available?: boolean;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `cafeterias.id`.<fk table='cafeterias' column='id'/>
     */
    cafe_id?: number;
  };
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: character varying */
    firstname?: string;
    /** Format: character varying */
    lastname?: string;
    /**
     * Format: boolean
     * @default false
     */
    cafe_owner?: boolean;
    /** Format: text */
    address?: string;
    /** Format: text */
    phone?: string;
    /** Format: text */
    gender?: string;
  };
  orderItems: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: integer
     * @description Note:
     * This is a Foreign Key to `order.id`.<fk table='order' column='id'/>
     */
    order_id: number;
    /** Format: numeric */
    total_price: number;
    /** Format: integer */
    qty: number;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `menu.id`.<fk table='menu' column='id'/>
     */
    menu_id?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description order */
  "body.order": definitions["order"];
  /** Format: integer */
  "rowFilter.order.id": string;
  /** Format: uuid */
  "rowFilter.order.user_id": string;
  /** Format: date */
  "rowFilter.order.date": string;
  /** Format: numeric */
  "rowFilter.order.amount": string;
  /** Format: character varying */
  "rowFilter.order.status": string;
  /** Format: character varying */
  "rowFilter.order.payment_ref": string;
  /** Format: bigint */
  "rowFilter.order.cafe_id": string;
  /** @description cartItems */
  "body.cartItems": definitions["cartItems"];
  /** Format: integer */
  "rowFilter.cartItems.id": string;
  /** Format: integer */
  "rowFilter.cartItems.cart_id": string;
  /** Format: numeric */
  "rowFilter.cartItems.total_price": string;
  /** Format: integer */
  "rowFilter.cartItems.qty": string;
  /** Format: integer */
  "rowFilter.cartItems.menu_id": string;
  /** @description cart */
  "body.cart": definitions["cart"];
  /** Format: integer */
  "rowFilter.cart.id": string;
  /** Format: uuid */
  "rowFilter.cart.user_id": string;
  /** Format: numeric */
  "rowFilter.cart.totalAmount": string;
  /** Format: integer */
  "rowFilter.cart.cafe_id": string;
  /** @description cafeterias */
  "body.cafeterias": definitions["cafeterias"];
  /** Format: integer */
  "rowFilter.cafeterias.id": string;
  /** Format: character varying */
  "rowFilter.cafeterias.name": string;
  /** Format: character varying */
  "rowFilter.cafeterias.image": string;
  /** Format: character varying */
  "rowFilter.cafeterias.about": string;
  /** Format: uuid */
  "rowFilter.cafeterias.owned_by": string;
  /** @description reviews */
  "body.reviews": definitions["reviews"];
  /** Format: integer */
  "rowFilter.reviews.id": string;
  /** Format: uuid */
  "rowFilter.reviews.user_id": string;
  /** Format: integer */
  "rowFilter.reviews.cafe_id": string;
  /** Format: text */
  "rowFilter.reviews.content": string;
  /** Format: integer */
  "rowFilter.reviews.rating": string;
  /** Format: timestamp with time zone */
  "rowFilter.reviews.date": string;
  /** @description menu */
  "body.menu": definitions["menu"];
  /** Format: integer */
  "rowFilter.menu.id": string;
  /** Format: character varying */
  "rowFilter.menu.name": string;
  /** Format: text */
  "rowFilter.menu.description": string;
  /** Format: numeric */
  "rowFilter.menu.price": string;
  /** Format: text */
  "rowFilter.menu.image": string;
  /** Format: boolean */
  "rowFilter.menu.available": string;
  /** Format: integer */
  "rowFilter.menu.cafe_id": string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.updated_at": string;
  /** Format: text */
  "rowFilter.users.username": string;
  /** Format: text */
  "rowFilter.users.avatar_url": string;
  /** Format: character varying */
  "rowFilter.users.firstname": string;
  /** Format: character varying */
  "rowFilter.users.lastname": string;
  /** Format: boolean */
  "rowFilter.users.cafe_owner": string;
  /** Format: text */
  "rowFilter.users.address": string;
  /** Format: text */
  "rowFilter.users.phone": string;
  /** Format: text */
  "rowFilter.users.gender": string;
  /** @description orderItems */
  "body.orderItems": definitions["orderItems"];
  /** Format: integer */
  "rowFilter.orderItems.id": string;
  /** Format: integer */
  "rowFilter.orderItems.order_id": string;
  /** Format: numeric */
  "rowFilter.orderItems.total_price": string;
  /** Format: integer */
  "rowFilter.orderItems.qty": string;
  /** Format: bigint */
  "rowFilter.orderItems.menu_id": string;
}

export interface operations {}

export interface external {}
